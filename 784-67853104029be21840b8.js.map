{"version":3,"file":"784-67853104029be21840b8.js","mappings":";;;AAAA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,cAAc,uBAAuB;AACrC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC;AACnC;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,4DAA4D;AAC5D;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mDAAmD;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kDAAkD;AAClD;AACA;AACA,WAAW;;AAEX;AACA,kDAAkD;AAClD;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,wCAAwC;AACxC;AACA,CAAC;;AAED,wCAAwC;AACxC;AACA,CAAC;;AAED,8CAA8C;AAC9C;AACA,CAAC;;AAED,uCAAuC;AACvC;AACA,CAAC;;AAED,oCAAoC;AACpC;AACA,CAAC;;AAED,qCAAqC;AACrC;AACA,CAAC;;AAED,uCAAuC;AACvC;AACA,CAAC;;AAED,uCAAuC;AACvC;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;;AAEA,sBAAsB,OAAO;AAC7B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mDAAmD;;AAEnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,+CAA+C,QAAQ;AACvD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;;AAEA,kBAAkB,kBAAkB;AACpC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kDAAkD;AAClD,QAAQ;AACR;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mDAAmD;AACnD,QAAQ;AACR;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,OAAO;AACvB;AACA;;AAEA;AACA;AACA;AACA,wCAAwC;AACxC;;AAEA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;;AAEA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,MAAM;AACN;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,aAAa;;AAEb,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA,MAAM;;;AAGN;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA,QAAQ;AACR,oBAAoB,OAAO;AAC3B;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA,MAAM;AACN,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC;AACA,aAAa,QAAQ;AACrB;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA,YAAY;AACZ;;AAEA,gCAAgC;AAChC;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;;AAEA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;;AAGN,iFAAiF;;AAEjF;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,YAAY,QAAQ;AACpB;AACA,mBAAmB;AACnB;;;AAGA;AACA;AACA;AACA;AACA,IAAI;;;AAGJ,kBAAkB;;AAElB;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,cAAc;AAChC;AACA;AACA;;AAEA,6BAA6B;AAC7B;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,YAAY,OAAO;AACnB,aAAa,QAAQ;AACrB;AACA,kBAAkB;AAClB;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA,IAAI;AACJ,gBAAgB,cAAc;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,aAAa,QAAQ;AACrB;AACA,6DAA6D;AAC7D;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;AAGA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA,kBAAkB,cAAc;AAChC;AACA,IAAI;AACJ;AACA;;;AAGA,wCAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,YAAY,OAAO;AACnB,YAAY,QAAQ;AACpB;AACA,oCAAoC;AACpC;;;AAGA;AACA;AACA;AACA;;AAEA,+DAA+D;AAC/D;AACA;;AAEA,wCAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,MAAM;AACN,0DAA0D,uDAAuD,OAAO;AACxH,GAAG;AACH;AACA;AACA;AACA;AACA,MAAM;AACN,0DAA0D,wDAAwD,OAAO;AACzH,GAAG;AACH;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,kCAAkC;;AAElC;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,MAAM;AACN,8BAA8B;;AAE9B;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,MAAM;AACN;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK,IAAI;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;;AAE9B;AACA;AACA;AACA,IAAI;AACJ;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;;AAEL;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA","sources":["webpack://data-science-editor/./src/workers/data/dist/node_modules/data-worker.js"],"sourcesContent":["function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction tidy(items, ...fns) {\n  if (typeof items === \"function\") {\n    throw new Error(\"You must supply the data as the first argument to tidy()\");\n  }\n\n  let result = items;\n\n  for (const fn of fns) {\n    if (fn) {\n      result = fn(result);\n    }\n  }\n\n  return result;\n}\n\nfunction filter(filterFn) {\n  const _filter = items => items.filter(filterFn);\n\n  return _filter;\n}\n\nfunction singleOrArray(d) {\n  return d == null ? [] : Array.isArray(d) ? d : [d];\n}\n\nfunction distinct(keys) {\n  const _distinct = items => {\n    keys = singleOrArray(keys);\n\n    if (!keys.length) {\n      const set = new Set();\n\n      for (const item of items) {\n        set.add(item);\n      }\n\n      return Array.from(set);\n    }\n\n    const rootMap = new Map();\n    const distinctItems = [];\n    const lastKey = keys[keys.length - 1];\n\n    for (const item of items) {\n      let map = rootMap;\n      let hasItem = false;\n\n      for (const key of keys) {\n        const mapItemKey = typeof key === \"function\" ? key(item) : item[key];\n\n        if (key === lastKey) {\n          hasItem = map.has(mapItemKey);\n\n          if (!hasItem) {\n            distinctItems.push(item);\n            map.set(mapItemKey, true);\n          }\n\n          break;\n        }\n\n        if (!map.has(mapItemKey)) {\n          map.set(mapItemKey, new Map());\n        }\n\n        map = map.get(mapItemKey);\n      }\n    }\n\n    return distinctItems;\n  };\n\n  return _distinct;\n}\n\nfunction ascending$1 (a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\nfunction* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n\nfunction variance$1(values, valueof) {\n  let count = 0;\n  let delta;\n  let mean = 0;\n  let sum = 0;\n\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  } else {\n    let index = -1;\n\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n\n  if (count > 1) return sum / (count - 1);\n}\n\nfunction deviation$1(values, valueof) {\n  const v = variance$1(values, valueof);\n  return v ? Math.sqrt(v) : v;\n}\n\n// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423\nclass Adder {\n  constructor() {\n    this._partials = new Float64Array(32);\n    this._n = 0;\n  }\n\n  add(x) {\n    const p = this._partials;\n    let i = 0;\n\n    for (let j = 0; j < this._n && j < 32; j++) {\n      const y = p[j],\n            hi = x + y,\n            lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);\n      if (lo) p[i++] = lo;\n      x = hi;\n    }\n\n    p[i] = x;\n    this._n = i + 1;\n    return this;\n  }\n\n  valueOf() {\n    const p = this._partials;\n    let n = this._n,\n        x,\n        y,\n        lo,\n        hi = 0;\n\n    if (n > 0) {\n      hi = p[--n];\n\n      while (n > 0) {\n        x = hi;\n        y = p[--n];\n        hi = x + y;\n        lo = y - (hi - x);\n        if (lo) break;\n      }\n\n      if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {\n        y = lo * 2;\n        x = hi + y;\n        if (y == x - hi) hi = x;\n      }\n    }\n\n    return hi;\n  }\n\n}\nfunction fsum(values, valueof) {\n  const adder = new Adder();\n\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value = +value) {\n        adder.add(value);\n      }\n    }\n  } else {\n    let index = -1;\n\n    for (let value of values) {\n      if (value = +valueof(value, ++index, values)) {\n        adder.add(value);\n      }\n    }\n  }\n\n  return +adder;\n}\n\nclass InternMap extends Map {\n  constructor(entries, key = keyof) {\n    super();\n    Object.defineProperties(this, {\n      _intern: {\n        value: new Map()\n      },\n      _key: {\n        value: key\n      }\n    });\n    if (entries != null) for (const [_key2, value] of entries) this.set(_key2, value);\n  }\n\n  get(key) {\n    return super.get(intern_get(this, key));\n  }\n\n  has(key) {\n    return super.has(intern_get(this, key));\n  }\n\n  set(key, value) {\n    return super.set(intern_set(this, key), value);\n  }\n\n  delete(key) {\n    return super.delete(intern_delete(this, key));\n  }\n\n}\n\nfunction intern_get({\n  _intern,\n  _key\n}, value) {\n  const key = _key(value);\n\n  return _intern.has(key) ? _intern.get(key) : value;\n}\n\nfunction intern_set({\n  _intern,\n  _key\n}, value) {\n  const key = _key(value);\n\n  if (_intern.has(key)) return _intern.get(key);\n\n  _intern.set(key, value);\n\n  return value;\n}\n\nfunction intern_delete({\n  _intern,\n  _key\n}, value) {\n  const key = _key(value);\n\n  if (_intern.has(key)) {\n    value = _intern.get(value);\n\n    _intern.delete(key);\n  }\n\n  return value;\n}\n\nfunction keyof(value) {\n  return value !== null && typeof value === \"object\" ? value.valueOf() : value;\n}\n\nfunction identity$2 (x) {\n  return x;\n}\n\nfunction group(values, ...keys) {\n  return nest(values, identity$2, identity$2, keys);\n}\n\nfunction nest(values, map, reduce, keys) {\n  return function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    const groups = new InternMap();\n    const keyof = keys[i++];\n    let index = -1;\n\n    for (const value of values) {\n      const key = keyof(value, ++index, values);\n      const group = groups.get(key);\n      if (group) group.push(value);else groups.set(key, [value]);\n    }\n\n    for (const [key, _values] of groups) {\n      groups.set(key, regroup(_values, i));\n    }\n\n    return map(groups);\n  }(values, 0);\n}\n\nfunction max$1(values, valueof) {\n  let max;\n\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null && (max < value || max === undefined && value >= value)) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (max < value || max === undefined && value >= value)) {\n        max = value;\n      }\n    }\n  }\n\n  return max;\n}\n\nfunction min$1(values, valueof) {\n  let min;\n\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null && (min > value || min === undefined && value >= value)) {\n        min = value;\n      }\n    }\n  } else {\n    let index = -1;\n\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (min > value || min === undefined && value >= value)) {\n        min = value;\n      }\n    }\n  }\n\n  return min;\n}\n\n// ISC license, Copyright 2018 Vladimir Agafonkin.\n\nfunction quickselect(array, k, left = 0, right = array.length - 1, compare = ascending$1) {\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(array, k, newLeft, newRight, compare);\n    }\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n    swap(array, left, k);\n    if (compare(array[right], t) > 0) swap(array, left, right);\n\n    while (i < j) {\n      swap(array, i, j), ++i, --j;\n\n      while (compare(array[i], t) < 0) ++i;\n\n      while (compare(array[j], t) > 0) --j;\n    }\n\n    if (compare(array[left], t) === 0) swap(array, left, j);else ++j, swap(array, j, right);\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n\n  return array;\n}\n\nfunction swap(array, i, j) {\n  const t = array[i];\n  array[i] = array[j];\n  array[j] = t;\n}\n\nfunction quantile(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return min$1(values);\n  if (p >= 1) return max$1(values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max$1(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min$1(values.subarray(i0 + 1));\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nfunction median$1 (values, valueof) {\n  return quantile(values, 0.5, valueof);\n}\n\nvar shuffle = shuffler(Math.random);\nfunction shuffler(random) {\n  return function shuffle(array, i0 = 0, i1 = array.length) {\n    let m = i1 - (i0 = +i0);\n\n    while (m) {\n      const i = random() * m-- | 0,\n            t = array[m + i0];\n      array[m + i0] = array[i + i0];\n      array[i + i0] = t;\n    }\n\n    return array;\n  };\n}\n\nfunction arrange(comparators) {\n  const _arrange = items => {\n    const comparatorFns = singleOrArray(comparators).map(comp => typeof comp === \"function\" ? comp.length === 1 ? asc(comp) : comp : asc(comp));\n    return items.slice().sort((a, b) => {\n      for (const comparator of comparatorFns) {\n        const result = comparator(a, b);\n        if (result) return result;\n      }\n\n      return 0;\n    });\n  };\n\n  return _arrange;\n}\n\nfunction asc(key) {\n  const keyFn = typeof key === \"function\" ? key : d => d[key];\n  return function _asc(a, b) {\n    return emptyAwareComparator(keyFn(a), keyFn(b), false);\n  };\n}\n\nfunction desc(key) {\n  const keyFn = typeof key === \"function\" ? key : d => d[key];\n  return function _desc(a, b) {\n    return emptyAwareComparator(keyFn(a), keyFn(b), true);\n  };\n}\n\nfunction emptyAwareComparator(aInput, bInput, desc2) {\n  let a = desc2 ? bInput : aInput;\n  let b = desc2 ? aInput : bInput;\n\n  if (isEmpty(a) && isEmpty(b)) {\n    const rankA = a !== a ? 0 : a === null ? 1 : 2;\n    const rankB = b !== b ? 0 : b === null ? 1 : 2;\n    const order = rankA - rankB;\n    return desc2 ? -order : order;\n  }\n\n  if (isEmpty(a)) {\n    return desc2 ? -1 : 1;\n  }\n\n  if (isEmpty(b)) {\n    return desc2 ? 1 : -1;\n  }\n\n  return ascending$1(a, b);\n}\n\nfunction isEmpty(value) {\n  return value == null || value !== value;\n}\n\nfunction summarize(summarizeSpec, options) {\n  const _summarize = items => {\n    options = options != null ? options : {};\n    const summarized = {};\n    const keys = Object.keys(summarizeSpec);\n\n    for (const key of keys) {\n      summarized[key] = summarizeSpec[key](items);\n    }\n\n    if (options.rest && items.length) {\n      const objectKeys = Object.keys(items[0]);\n\n      for (const objKey of objectKeys) {\n        if (keys.includes(objKey)) {\n          continue;\n        }\n\n        summarized[objKey] = options.rest(objKey)(items);\n      }\n    }\n\n    return [summarized];\n  };\n\n  return _summarize;\n}\n\nfunction mutate(mutateSpec) {\n  const _mutate = items => {\n    const mutatedItems = items.map(d => _extends({}, d));\n    let i = 0;\n\n    for (const mutatedItem of mutatedItems) {\n      for (const key in mutateSpec) {\n        const mutateSpecValue = mutateSpec[key];\n        const mutatedResult = typeof mutateSpecValue === \"function\" ? mutateSpecValue(mutatedItem, i, mutatedItems) : mutateSpecValue;\n        mutatedItem[key] = mutatedResult;\n      }\n\n      ++i;\n    }\n\n    return mutatedItems;\n  };\n\n  return _mutate;\n}\n\nfunction assignGroupKeys(d, keys) {\n  if (d == null || typeof d !== \"object\" || Array.isArray(d)) return d;\n  const keysObj = Object.fromEntries(keys.filter(key => typeof key[0] !== \"function\" && key[0] != null));\n  return Object.assign(keysObj, d);\n}\n\nfunction groupTraversal(grouped, outputGrouped, keys, addSubgroup, addLeaves, level = 0) {\n  for (const [key, value] of grouped.entries()) {\n    const keysHere = [...keys, key];\n\n    if (value instanceof Map) {\n      const subgroup = addSubgroup(outputGrouped, keysHere, level);\n      groupTraversal(value, subgroup, keysHere, addSubgroup, addLeaves, level + 1);\n    } else {\n      addLeaves(outputGrouped, keysHere, value, level);\n    }\n  }\n\n  return outputGrouped;\n}\n\nfunction groupMap(grouped, groupFn, keyFn = keys => keys[keys.length - 1]) {\n  function addSubgroup(parentGrouped, keys) {\n    const subgroup = new Map();\n    parentGrouped.set(keyFn(keys), subgroup);\n    return subgroup;\n  }\n\n  function addLeaves(parentGrouped, keys, values) {\n    parentGrouped.set(keyFn(keys), groupFn(values, keys));\n  }\n\n  const outputGrouped = new Map();\n  groupTraversal(grouped, outputGrouped, [], addSubgroup, addLeaves);\n  return outputGrouped;\n}\n\nconst identity$1 = d => d;\n\nfunction isObject(obj) {\n  const type = typeof obj;\n  return obj != null && (type === \"object\" || type === \"function\");\n}\n\nfunction groupBy(groupKeys, fns, options) {\n  if (typeof fns === \"function\") {\n    fns = [fns];\n  } else if (arguments.length === 2 && fns != null && !Array.isArray(fns)) {\n    options = fns;\n  }\n\n  const _groupBy = items => {\n    const grouped = makeGrouped(items, groupKeys);\n    const results = runFlow(grouped, fns, options == null ? void 0 : options.addGroupKeys);\n\n    if (options == null ? void 0 : options.export) {\n      switch (options.export) {\n        case \"grouped\":\n          return results;\n\n        case \"levels\":\n          return exportLevels(results, options);\n\n        case \"entries-obj\":\n        case \"entriesObject\":\n          return exportLevels(results, _extends({}, options, {\n            export: \"levels\",\n            levels: [\"entries-object\"]\n          }));\n\n        default:\n          return exportLevels(results, _extends({}, options, {\n            export: \"levels\",\n            levels: [options.export]\n          }));\n      }\n    }\n\n    const ungrouped = ungroup(results, options == null ? void 0 : options.addGroupKeys);\n    return ungrouped;\n  };\n\n  return _groupBy;\n}\n\ngroupBy.grouped = options => _extends({}, options, {\n  export: \"grouped\"\n});\n\ngroupBy.entries = options => _extends({}, options, {\n  export: \"entries\"\n});\n\ngroupBy.entriesObject = options => _extends({}, options, {\n  export: \"entries-object\"\n});\n\ngroupBy.object = options => _extends({}, options, {\n  export: \"object\"\n});\n\ngroupBy.map = options => _extends({}, options, {\n  export: \"map\"\n});\n\ngroupBy.keys = options => _extends({}, options, {\n  export: \"keys\"\n});\n\ngroupBy.values = options => _extends({}, options, {\n  export: \"values\"\n});\n\ngroupBy.levels = options => _extends({}, options, {\n  export: \"levels\"\n});\n\nfunction runFlow(items, fns, addGroupKeys) {\n  let result = items;\n  if (!(fns == null ? void 0 : fns.length)) return result;\n\n  for (const fn of fns) {\n    if (!fn) continue;\n    result = groupMap(result, (items2, keys) => {\n      const context = {\n        groupKeys: keys\n      };\n      let leafItemsMapped = fn(items2, context);\n\n      if (addGroupKeys !== false) {\n        leafItemsMapped = leafItemsMapped.map(item => assignGroupKeys(item, keys));\n      }\n\n      return leafItemsMapped;\n    });\n  }\n\n  return result;\n}\n\nfunction makeGrouped(items, groupKeys) {\n  const groupKeyFns = singleOrArray(groupKeys).map((key, i) => {\n    const keyFn = typeof key === \"function\" ? key : d => d[key];\n    const keyCache = new Map();\n    return d => {\n      const keyValue = keyFn(d);\n      const keyValueOf = isObject(keyValue) ? keyValue.valueOf() : keyValue;\n\n      if (keyCache.has(keyValueOf)) {\n        return keyCache.get(keyValueOf);\n      }\n\n      const keyWithName = [key, keyValue];\n      keyCache.set(keyValueOf, keyWithName);\n      return keyWithName;\n    };\n  });\n  const grouped = group(items, ...groupKeyFns);\n  return grouped;\n}\n\nfunction ungroup(grouped, addGroupKeys) {\n  const items = [];\n  groupTraversal(grouped, items, [], identity$1, (root, keys, values) => {\n    let valuesToAdd = values;\n\n    if (addGroupKeys !== false) {\n      valuesToAdd = values.map(d => assignGroupKeys(d, keys));\n    }\n\n    root.push(...valuesToAdd);\n  });\n  return items;\n}\n\nconst defaultCompositeKey = keys => keys.join(\"/\");\n\nfunction processFromGroupsOptions(options) {\n  var _a;\n\n  const {\n    flat,\n    single,\n    mapLeaf = identity$1,\n    mapLeaves = identity$1,\n    addGroupKeys\n  } = options;\n  let compositeKey;\n\n  if (options.flat) {\n    compositeKey = (_a = options.compositeKey) != null ? _a : defaultCompositeKey;\n  }\n\n  const groupFn = (values, keys) => {\n    return single ? mapLeaf(addGroupKeys === false ? values[0] : assignGroupKeys(values[0], keys)) : mapLeaves(values.map(d => mapLeaf(addGroupKeys === false ? d : assignGroupKeys(d, keys))));\n  };\n\n  const keyFn = flat ? keys => compositeKey(keys.map(d => d[1])) : keys => keys[keys.length - 1][1];\n  return {\n    groupFn,\n    keyFn\n  };\n}\n\nfunction exportLevels(grouped, options) {\n  const {\n    groupFn,\n    keyFn\n  } = processFromGroupsOptions(options);\n  let {\n    mapEntry = identity$1\n  } = options;\n  const {\n    levels = [\"entries\"]\n  } = options;\n  const levelSpecs = [];\n\n  for (const levelOption of levels) {\n    switch (levelOption) {\n      case \"entries\":\n      case \"entries-object\":\n      case \"entries-obj\":\n      case \"entriesObject\":\n        {\n          const levelMapEntry = (levelOption === \"entries-object\" || levelOption === \"entries-obj\" || levelOption === \"entriesObject\") && options.mapEntry == null ? ([key, values]) => ({\n            key,\n            values\n          }) : mapEntry;\n          levelSpecs.push({\n            id: \"entries\",\n            createEmptySubgroup: () => [],\n            addSubgroup: (parentGrouped, newSubgroup, key, level) => {\n              parentGrouped.push(levelMapEntry([key, newSubgroup], level));\n            },\n            addLeaf: (parentGrouped, key, values, level) => {\n              parentGrouped.push(levelMapEntry([key, values], level));\n            }\n          });\n          break;\n        }\n\n      case \"map\":\n        levelSpecs.push({\n          id: \"map\",\n          createEmptySubgroup: () => new Map(),\n          addSubgroup: (parentGrouped, newSubgroup, key) => {\n            parentGrouped.set(key, newSubgroup);\n          },\n          addLeaf: (parentGrouped, key, values) => {\n            parentGrouped.set(key, values);\n          }\n        });\n        break;\n\n      case \"object\":\n        levelSpecs.push({\n          id: \"object\",\n          createEmptySubgroup: () => ({}),\n          addSubgroup: (parentGrouped, newSubgroup, key) => {\n            parentGrouped[key] = newSubgroup;\n          },\n          addLeaf: (parentGrouped, key, values) => {\n            parentGrouped[key] = values;\n          }\n        });\n        break;\n\n      case \"keys\":\n        levelSpecs.push({\n          id: \"keys\",\n          createEmptySubgroup: () => [],\n          addSubgroup: (parentGrouped, newSubgroup, key) => {\n            parentGrouped.push([key, newSubgroup]);\n          },\n          addLeaf: (parentGrouped, key) => {\n            parentGrouped.push(key);\n          }\n        });\n        break;\n\n      case \"values\":\n        levelSpecs.push({\n          id: \"values\",\n          createEmptySubgroup: () => [],\n          addSubgroup: (parentGrouped, newSubgroup) => {\n            parentGrouped.push(newSubgroup);\n          },\n          addLeaf: (parentGrouped, key, values) => {\n            parentGrouped.push(values);\n          }\n        });\n        break;\n\n      default:\n        {\n          if (typeof levelOption === \"object\") {\n            levelSpecs.push(levelOption);\n          }\n        }\n    }\n  }\n\n  const addSubgroup = (parentGrouped, keys, level) => {\n    var _a, _b;\n\n    if (options.flat) {\n      return parentGrouped;\n    }\n\n    const levelSpec = (_a = levelSpecs[level]) != null ? _a : levelSpecs[levelSpecs.length - 1];\n    const nextLevelSpec = (_b = levelSpecs[level + 1]) != null ? _b : levelSpec;\n    const newSubgroup = nextLevelSpec.createEmptySubgroup();\n    levelSpec.addSubgroup(parentGrouped, newSubgroup, keyFn(keys), level);\n    return newSubgroup;\n  };\n\n  const addLeaf = (parentGrouped, keys, values, level) => {\n    var _a;\n\n    const levelSpec = (_a = levelSpecs[level]) != null ? _a : levelSpecs[levelSpecs.length - 1];\n    levelSpec.addLeaf(parentGrouped, keyFn(keys), groupFn(values, keys), level);\n  };\n\n  const initialOutputObject = levelSpecs[0].createEmptySubgroup();\n  return groupTraversal(grouped, initialOutputObject, [], addSubgroup, addLeaf);\n}\n\nfunction n(options) {\n  if (options == null ? void 0 : options.predicate) {\n    const predicate = options.predicate;\n    return items => items.reduce((n2, d, i) => predicate(d, i, items) ? n2 + 1 : n2, 0);\n  }\n\n  return items => items.length;\n}\n\nfunction sum$1(key, options) {\n  let keyFn = typeof key === \"function\" ? key : d => d[key];\n\n  if (options == null ? void 0 : options.predicate) {\n    const originalKeyFn = keyFn;\n    const predicate = options.predicate;\n\n    keyFn = (d, index, array) => predicate(d, index, array) ? originalKeyFn(d, index, array) : 0;\n  }\n\n  return items => fsum(items, keyFn);\n}\n\nfunction tally(options) {\n  const _tally = items => {\n    const {\n      name = \"n\",\n      wt\n    } = options != null ? options : {};\n    const summarized = summarize({\n      [name]: wt == null ? n() : sum$1(wt)\n    })(items);\n    return summarized;\n  };\n\n  return _tally;\n}\n\nfunction count$1(groupKeys, options) {\n  const _count = items => {\n    options = options != null ? options : {};\n    const {\n      name = \"n\",\n      sort\n    } = options;\n    const results = tidy(items, groupBy(groupKeys, [tally(options)]), sort ? arrange(desc(name)) : identity$1);\n    return results;\n  };\n\n  return _count;\n}\n\nfunction rename(renameSpec) {\n  const _rename = items => {\n    return items.map(d => {\n      var _a;\n\n      const mapped = {};\n      const keys = Object.keys(d);\n\n      for (const key of keys) {\n        const newKey = (_a = renameSpec[key]) != null ? _a : key;\n        mapped[newKey] = d[key];\n      }\n\n      return mapped;\n    });\n  };\n\n  return _rename;\n}\n\nfunction slice$1(start, end) {\n  const _slice = items => items.slice(start, end);\n\n  return _slice;\n}\n\nconst sliceHead = n => slice$1(0, n);\n\nconst sliceTail = n => slice$1(-n);\n\nfunction sliceMin(n, orderBy) {\n  const _sliceMin = items => arrange(orderBy)(items).slice(0, n);\n\n  return _sliceMin;\n}\n\nfunction sliceMax(n, orderBy) {\n  const _sliceMax = items => typeof orderBy === \"function\" ? arrange(orderBy)(items).slice(-n).reverse() : arrange(desc(orderBy))(items).slice(0, n);\n\n  return _sliceMax;\n}\n\nfunction sliceSample(n, options) {\n  options = options != null ? options : {};\n  const {\n    replace\n  } = options;\n\n  const _sliceSample = items => {\n    if (!items.length) return items.slice();\n\n    if (replace) {\n      const sliced = [];\n\n      for (let i = 0; i < n; ++i) {\n        sliced.push(items[Math.floor(Math.random() * items.length)]);\n      }\n\n      return sliced;\n    }\n\n    return shuffle(items.slice()).slice(0, n);\n  };\n\n  return _sliceSample;\n}\n\nfunction mutateWithSummary(mutateSpec) {\n  const _mutate = items => {\n    const mutatedItems = items.map(d => _extends({}, d));\n\n    for (const key in mutateSpec) {\n      const mutateSpecValue = mutateSpec[key];\n      const mutatedResult = typeof mutateSpecValue === \"function\" ? mutateSpecValue(mutatedItems) : mutateSpecValue;\n      const mutatedVector = (mutatedResult == null ? void 0 : mutatedResult[Symbol.iterator]) && typeof mutatedResult !== \"string\" ? mutatedResult : items.map(() => mutatedResult);\n      let i = -1;\n\n      for (const mutatedItem of mutatedItems) {\n        mutatedItem[key] = mutatedVector[++i];\n      }\n    }\n\n    return mutatedItems;\n  };\n\n  return _mutate;\n}\n\nfunction keysFromItems(items) {\n  if (items.length < 1) return [];\n  const keys = Object.keys(items[0]);\n  return keys;\n}\n\nfunction everything() {\n  return items => {\n    const keys = keysFromItems(items);\n    return keys;\n  };\n}\n\nfunction processSelectors(items, selectKeys) {\n  let processedSelectKeys = [];\n\n  for (const keyInput of singleOrArray(selectKeys)) {\n    if (typeof keyInput === \"function\") {\n      processedSelectKeys.push(...keyInput(items));\n    } else {\n      processedSelectKeys.push(keyInput);\n    }\n  }\n\n  if (processedSelectKeys.length && processedSelectKeys[0][0] === \"-\") {\n    processedSelectKeys = [...everything()(items), ...processedSelectKeys];\n  }\n\n  const negationMap = {};\n  const keysWithoutNegations = [];\n\n  for (let k = processedSelectKeys.length - 1; k >= 0; k--) {\n    const key = processedSelectKeys[k];\n\n    if (key[0] === \"-\") {\n      negationMap[key.substring(1)] = true;\n      continue;\n    }\n\n    if (negationMap[key]) {\n      negationMap[key] = false;\n      continue;\n    }\n\n    keysWithoutNegations.unshift(key);\n  }\n\n  processedSelectKeys = Array.from(new Set(keysWithoutNegations));\n  return processedSelectKeys;\n}\n\nfunction select(selectKeys) {\n  const _select = items => {\n    let processedSelectKeys = processSelectors(items, selectKeys);\n    if (!processedSelectKeys.length) return items;\n    return items.map(d => {\n      const mapped = {};\n\n      for (const key of processedSelectKeys) {\n        mapped[key] = d[key];\n      }\n\n      return mapped;\n    });\n  };\n\n  return _select;\n}\n\nfunction replaceNully(replaceSpec) {\n  const _replaceNully = items => {\n    const replacedItems = [];\n\n    for (const d of items) {\n      const obj = _extends({}, d);\n\n      for (const key in replaceSpec) {\n        if (obj[key] == null) {\n          obj[key] = replaceSpec[key];\n        }\n      }\n\n      replacedItems.push(obj);\n    }\n\n    return replacedItems;\n  };\n\n  return _replaceNully;\n}\n\nfunction fill(keys) {\n  const _fill = items => {\n    const keysArray = singleOrArray(keys);\n    const replaceMap = {};\n    return items.map(d => {\n      const obj = _extends({}, d);\n\n      for (const key of keysArray) {\n        if (obj[key] != null) {\n          replaceMap[key] = obj[key];\n        } else if (replaceMap[key] != null) {\n          obj[key] = replaceMap[key];\n        }\n      }\n\n      return obj;\n    });\n  };\n\n  return _fill;\n}\n\nfunction mean$2(items, accessor) {\n  let n = 0;\n\n  for (let i = 0; i < items.length; ++i) {\n    const value = accessor(items[i], i, items);\n\n    if (+value === value) {\n      n += 1;\n    }\n  }\n\n  return n ? fsum(items, accessor) / n : void 0;\n}\n\nfunction roll(width, rollFn, options) {\n  const {\n    partial = false,\n    align = \"right\"\n  } = options != null ? options : {};\n  const halfWidth = Math.floor(width / 2);\n  return items => {\n    return items.map((_, i) => {\n      const endIndex = align === \"right\" ? i : align === \"center\" ? i + halfWidth : i + width - 1;\n\n      if (!partial && (endIndex - width + 1 < 0 || endIndex >= items.length)) {\n        return void 0;\n      }\n\n      const startIndex = Math.max(0, endIndex - width + 1);\n      const itemsInWindow = items.slice(startIndex, endIndex + 1);\n      return rollFn(itemsInWindow, endIndex);\n    });\n  };\n}\n\nfunction min(key) {\n  const keyFn = typeof key === \"function\" ? key : d => d[key];\n  return items => min$1(items, keyFn);\n}\n\nfunction max(key) {\n  const keyFn = typeof key === \"function\" ? key : d => d[key];\n  return items => max$1(items, keyFn);\n}\n\nfunction mean$1(key) {\n  const keyFn = typeof key === \"function\" ? key : d => d[key];\n  return items => mean$2(items, keyFn);\n}\n\nfunction median(key) {\n  const keyFn = typeof key === \"function\" ? key : d => d[key];\n  return items => median$1(items, keyFn);\n}\n\nfunction deviation(key) {\n  const keyFn = typeof key === \"function\" ? key : d => d[key];\n  return items => deviation$1(items, keyFn);\n}\n\nfunction variance(key) {\n  const keyFn = typeof key === \"function\" ? key : d => d[key];\n  return items => variance$1(items, keyFn);\n}\n\nfunction ascending(a, b) {\n  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\nfunction descending(a, b) {\n  return a == null || b == null ? NaN : b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n\nfunction bisector(f) {\n  let compare1, compare2, delta; // If an accessor is specified, promote it to a comparator. In this case we\n  // can test whether the search value is (self-) comparable. We can’t do this\n  // for a comparator (except for specific, known comparators) because we can’t\n  // tell if the comparator is symmetric, and an asymmetric comparator can’t be\n  // used to test whether a single value is comparable.\n\n  if (f.length !== 2) {\n    compare1 = ascending;\n\n    compare2 = (d, x) => ascending(f(d), x);\n\n    delta = (d, x) => f(d) - x;\n  } else {\n    compare1 = f === ascending || f === descending ? f : zero;\n    compare2 = f;\n    delta = f;\n  }\n\n  function left(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n\n      do {\n        const mid = lo + hi >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n      } while (lo < hi);\n    }\n\n    return lo;\n  }\n\n  function right(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n\n      do {\n        const mid = lo + hi >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;else hi = mid;\n      } while (lo < hi);\n    }\n\n    return lo;\n  }\n\n  function center(a, x, lo = 0, hi = a.length) {\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {\n    left,\n    center,\n    right\n  };\n}\n\nfunction zero() {\n  return 0;\n}\n\nfunction number(x) {\n  return x === null ? NaN : +x;\n}\n\nconst ascendingBisect = bisector(ascending);\nconst bisectRight = ascendingBisect.right;\nbisector(number).center;\nvar bisect = bisectRight;\n\nfunction count(values, valueof) {\n  let count = 0;\n\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  } else {\n    let index = -1;\n\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  }\n\n  return count;\n}\n\nfunction extent(values, valueof) {\n  let min;\n  let max;\n\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  } else {\n    let index = -1;\n\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  }\n\n  return [min, max];\n}\n\nfunction identity(x) {\n  return x;\n}\n\nvar array = Array.prototype;\nvar slice = array.slice;\n\nfunction constant(x) {\n  return () => x;\n}\n\nvar e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\nfunction ticks(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    let r0 = Math.round(start / step),\n        r1 = Math.round(stop / step);\n    if (r0 * step < start) ++r0;\n    if (r1 * step > stop) --r1;\n    ticks = new Array(n = r1 - r0 + 1);\n\n    while (++i < n) ticks[i] = (r0 + i) * step;\n  } else {\n    step = -step;\n    let r0 = Math.round(start * step),\n        r1 = Math.round(stop * step);\n    if (r0 / step < start) ++r0;\n    if (r1 / step > stop) --r1;\n    ticks = new Array(n = r1 - r0 + 1);\n\n    while (++i < n) ticks[i] = (r0 + i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n  return ticks;\n}\nfunction tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nfunction nice(start, stop, count) {\n  let prestep;\n\n  while (true) {\n    const step = tickIncrement(start, stop, count);\n\n    if (step === prestep || step === 0 || !isFinite(step)) {\n      return [start, stop];\n    } else if (step > 0) {\n      start = Math.floor(start / step) * step;\n      stop = Math.ceil(stop / step) * step;\n    } else if (step < 0) {\n      start = Math.ceil(start * step) / step;\n      stop = Math.floor(stop * step) / step;\n    }\n\n    prestep = step;\n  }\n}\n\nfunction thresholdSturges(values) {\n  return Math.ceil(Math.log(count(values)) / Math.LN2) + 1;\n}\n\nfunction bin() {\n  var value = identity,\n      domain = extent,\n      threshold = thresholdSturges;\n\n  function histogram(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n    var i,\n        n = data.length,\n        x,\n        step,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1); // Convert number of thresholds into uniform thresholds, and nice the\n    // default domain accordingly.\n\n    if (!Array.isArray(tz)) {\n      const max = x1,\n            tn = +tz;\n      if (domain === extent) [x0, x1] = nice(x0, x1, tn);\n      tz = ticks(x0, x1, tn); // If the domain is aligned with the first tick (which it will by\n      // default), then we can use quantization rather than bisection to bin\n      // values, which is substantially faster.\n\n      if (tz[0] <= x0) step = tickIncrement(x0, x1, tn); // If the last threshold is coincident with the domain’s upper bound, the\n      // last bin will be zero-width. If the default domain is used, and this\n      // last threshold is coincident with the maximum input value, we can\n      // extend the niced upper bound by one tick to ensure uniform bin widths;\n      // otherwise, we simply remove the last threshold. Note that we don’t\n      // coerce values or the domain to numbers, and thus must be careful to\n      // compare order (>=) rather than strict equality (===)!\n\n      if (tz[tz.length - 1] >= x1) {\n        if (max >= x1 && domain === extent) {\n          const _step = tickIncrement(x0, x1, tn);\n\n          if (isFinite(_step)) {\n            if (_step > 0) {\n              x1 = (Math.floor(x1 / _step) + 1) * _step;\n            } else if (_step < 0) {\n              x1 = (Math.ceil(x1 * -_step) + 1) / -_step;\n            }\n          }\n        } else {\n          tz.pop();\n        }\n      }\n    } // Remove any thresholds outside the domain.\n    // Be careful not to mutate an array owned by the user!\n\n\n    var m = tz.length,\n        a = 0,\n        b = m;\n\n    while (tz[a] <= x0) ++a;\n\n    while (tz[b - 1] > x1) --b;\n\n    if (a || b < m) tz = tz.slice(a, b), m = b - a;\n    var bins = new Array(m + 1),\n        bin; // Initialize bins.\n\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    } // Assign data to bins by value, ignoring any outside the domain.\n\n\n    if (isFinite(step)) {\n      if (step > 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            bins[Math.min(m, Math.floor((x - x0) / step))].push(data[i]);\n          }\n        }\n      } else if (step < 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            const j = Math.floor((x0 - x) * step);\n            bins[Math.min(m, j + (tz[j] <= x))].push(data[i]); // handle off-by-one due to rounding\n          }\n        }\n      }\n    } else {\n      for (i = 0; i < n; ++i) {\n        if ((x = values[i]) != null && x0 <= x && x <= x1) {\n          bins[bisect(tz, x, 0, m)].push(data[i]);\n        }\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function (_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function (_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function (_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : constant(Array.isArray(_) ? slice.call(_) : _), histogram) : threshold;\n  };\n\n  return histogram;\n}\n\n/**\n * [Simple linear regression](http://en.wikipedia.org/wiki/Simple_linear_regression)\n * is a simple way to find a fitted line\n * between a set of coordinates. This algorithm finds the slope and y-intercept of a regression line\n * using the least sum of squares.\n *\n * @param {Array<Array<number>>} data an array of two-element of arrays,\n * like `[[0, 1], [2, 3]]`\n * @returns {Object} object containing slope and intersect of regression line\n * @example\n * linearRegression([[0, 0], [1, 1]]); // => { m: 1, b: 0 }\n */\nfunction linearRegression(data) {\n  var m, b; // Store data length in a local variable to reduce\n  // repeated object property lookups\n\n  var dataLength = data.length; //if there's only one point, arbitrarily choose a slope of 0\n  //and a y-intercept of whatever the y of the initial point is\n\n  if (dataLength === 1) {\n    m = 0;\n    b = data[0][1];\n  } else {\n    // Initialize our sums and scope the `m` and `b`\n    // variables that define the line.\n    var sumX = 0,\n        sumY = 0,\n        sumXX = 0,\n        sumXY = 0; // Use local variables to grab point values\n    // with minimal object property lookups\n\n    var point, x, y; // Gather the sum of all x values, the sum of all\n    // y values, and the sum of x^2 and (x*y) for each\n    // value.\n    //\n    // In math notation, these would be SS_x, SS_y, SS_xx, and SS_xy\n\n    for (var i = 0; i < dataLength; i++) {\n      point = data[i];\n      x = point[0];\n      y = point[1];\n      sumX += x;\n      sumY += y;\n      sumXX += x * x;\n      sumXY += x * y;\n    } // `m` is the slope of the regression line\n\n\n    m = (dataLength * sumXY - sumX * sumY) / (dataLength * sumXX - sumX * sumX); // `b` is the y-intercept of the line.\n\n    b = sumY / dataLength - m * sumX / dataLength;\n  } // Return both values as an object.\n\n\n  return {\n    m: m,\n    b: b\n  };\n}\n/**\n * Our default sum is the [Kahan-Babuska algorithm](https://pdfs.semanticscholar.org/1760/7d467cda1d0277ad272deb2113533131dc09.pdf).\n * This method is an improvement over the classical\n * [Kahan summation algorithm](https://en.wikipedia.org/wiki/Kahan_summation_algorithm).\n * It aims at computing the sum of a list of numbers while correcting for\n * floating-point errors. Traditionally, sums are calculated as many\n * successive additions, each one with its own floating-point roundoff. These\n * losses in precision add up as the number of numbers increases. This alternative\n * algorithm is more accurate than the simple way of calculating sums by simple\n * addition.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x input\n * @return {number} sum of all input numbers\n * @example\n * sum([1, 2, 3]); // => 6\n */\n\n\nfunction sum(x) {\n  // If the array is empty, we needn't bother computing its sum\n  if (x.length === 0) {\n    return 0;\n  } // Initializing the sum as the first number in the array\n\n\n  var sum = x[0]; // Keeping track of the floating-point error correction\n\n  var correction = 0;\n  var transition;\n\n  if (typeof sum !== \"number\") {\n    return NaN;\n  }\n\n  for (var i = 1; i < x.length; i++) {\n    if (typeof x[i] !== \"number\") {\n      return NaN;\n    }\n\n    transition = sum + x[i]; // Here we need to update the correction in a different fashion\n    // if the new absolute value is greater than the absolute sum\n\n    if (Math.abs(sum) >= Math.abs(x[i])) {\n      correction += sum - transition + x[i];\n    } else {\n      correction += x[i] - transition + sum;\n    }\n\n    sum = transition;\n  } // Returning the corrected sum\n\n\n  return sum + correction;\n}\n/**\n * The mean, _also known as average_,\n * is the sum of all values over the number of values.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @throws {Error} if the length of x is less than one\n * @returns {number} mean\n * @example\n * mean([0, 10]); // => 5\n */\n\n\nfunction mean(x) {\n  if (x.length === 0) {\n    throw new Error(\"mean requires at least one data point\");\n  }\n\n  return sum(x) / x.length;\n}\n/**\n * The sum of deviations to the Nth power.\n * When n=2 it's the sum of squared deviations.\n * When n=3 it's the sum of cubed deviations.\n *\n * @param {Array<number>} x\n * @param {number} n power\n * @returns {number} sum of nth power deviations\n *\n * @example\n * var input = [1, 2, 3];\n * // since the variance of a set is the mean squared\n * // deviations, we can calculate that with sumNthPowerDeviations:\n * sumNthPowerDeviations(input, 2) / input.length;\n */\n\n\nfunction sumNthPowerDeviations(x, n) {\n  var meanValue = mean(x);\n  var sum = 0;\n  var tempValue;\n  var i; // This is an optimization: when n is 2 (we're computing a number squared),\n  // multiplying the number by itself is significantly faster than using\n  // the Math.pow method.\n\n  if (n === 2) {\n    for (i = 0; i < x.length; i++) {\n      tempValue = x[i] - meanValue;\n      sum += tempValue * tempValue;\n    }\n  } else {\n    for (i = 0; i < x.length; i++) {\n      sum += Math.pow(x[i] - meanValue, n);\n    }\n  }\n\n  return sum;\n}\n/**\n * [Sample covariance](https://en.wikipedia.org/wiki/Sample_mean_and_covariance) of two datasets:\n * how much do the two datasets move together?\n * x and y are two datasets, represented as arrays of numbers.\n *\n * @param {Array<number>} x a sample of two or more data points\n * @param {Array<number>} y a sample of two or more data points\n * @throws {Error} if x and y do not have equal lengths\n * @throws {Error} if x or y have length of one or less\n * @returns {number} sample covariance\n * @example\n * sampleCovariance([1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]); // => -3.5\n */\n\n\nfunction sampleCovariance(x, y) {\n  // The two datasets must have the same length which must be more than 1\n  if (x.length !== y.length) {\n    throw new Error(\"sampleCovariance requires samples with equal lengths\");\n  }\n\n  if (x.length < 2) {\n    throw new Error(\"sampleCovariance requires at least two data points in each sample\");\n  } // determine the mean of each dataset so that we can judge each\n  // value of the dataset fairly as the difference from the mean. this\n  // way, if one dataset is [1, 2, 3] and [2, 3, 4], their covariance\n  // does not suffer because of the difference in absolute values\n\n\n  var xmean = mean(x);\n  var ymean = mean(y);\n  var sum = 0; // for each pair of values, the covariance increases when their\n  // difference from the mean is associated - if both are well above\n  // or if both are well below\n  // the mean, the covariance increases significantly.\n\n  for (var i = 0; i < x.length; i++) {\n    sum += (x[i] - xmean) * (y[i] - ymean);\n  } // this is Bessels' Correction: an adjustment made to sample statistics\n  // that allows for the reduced degree of freedom entailed in calculating\n  // values from samples rather than complete populations.\n\n\n  var besselsCorrection = x.length - 1; // the covariance is weighted by the length of the datasets.\n\n  return sum / besselsCorrection;\n}\n/**\n * The [sample variance](https://en.wikipedia.org/wiki/Variance#Sample_variance)\n * is the sum of squared deviations from the mean. The sample variance\n * is distinguished from the variance by the usage of [Bessel's Correction](https://en.wikipedia.org/wiki/Bessel's_correction):\n * instead of dividing the sum of squared deviations by the length of the input,\n * it is divided by the length minus one. This corrects the bias in estimating\n * a value from a set that you don't know if full.\n *\n * References:\n * * [Wolfram MathWorld on Sample Variance](http://mathworld.wolfram.com/SampleVariance.html)\n *\n * @param {Array<number>} x a sample of two or more data points\n * @throws {Error} if the length of x is less than 2\n * @return {number} sample variance\n * @example\n * sampleVariance([1, 2, 3, 4, 5]); // => 2.5\n */\n\n\nfunction sampleVariance(x) {\n  if (x.length < 2) {\n    throw new Error(\"sampleVariance requires at least two data points\");\n  }\n\n  var sumSquaredDeviationsValue = sumNthPowerDeviations(x, 2); // this is Bessels' Correction: an adjustment made to sample statistics\n  // that allows for the reduced degree of freedom entailed in calculating\n  // values from samples rather than complete populations.\n\n  var besselsCorrection = x.length - 1; // Find the mean value of that list\n\n  return sumSquaredDeviationsValue / besselsCorrection;\n}\n/**\n * The [sample standard deviation](http://en.wikipedia.org/wiki/Standard_deviation#Sample_standard_deviation)\n * is the square root of the sample variance.\n *\n * @param {Array<number>} x input array\n * @returns {number} sample standard deviation\n * @example\n * sampleStandardDeviation([2, 4, 4, 4, 5, 5, 7, 9]).toFixed(2);\n * // => '2.14'\n */\n\n\nfunction sampleStandardDeviation(x) {\n  var sampleVarianceX = sampleVariance(x);\n  return Math.sqrt(sampleVarianceX);\n}\n/**\n * The [correlation](http://en.wikipedia.org/wiki/Correlation_and_dependence) is\n * a measure of how correlated two datasets are, between -1 and 1\n *\n * @param {Array<number>} x first input\n * @param {Array<number>} y second input\n * @returns {number} sample correlation\n * @example\n * sampleCorrelation([1, 2, 3, 4, 5, 6], [2, 2, 3, 4, 5, 60]).toFixed(2);\n * // => '0.69'\n */\n\n\nfunction sampleCorrelation(x, y) {\n  var cov = sampleCovariance(x, y);\n  var xstd = sampleStandardDeviation(x);\n  var ystd = sampleStandardDeviation(y);\n  return cov / xstd / ystd;\n}\n\nconst _excluded = [\"id\", \"worker\", \"data\", \"previousData\"];\nconst summarizers = {\n  mean: mean$1,\n  median,\n  min,\n  max,\n  sum: sum$1,\n  deviation,\n  variance\n}; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nconst handlers = {\n  arrange: props => {\n    const {\n      column,\n      descending,\n      data\n    } = props;\n    return tidy(data, arrange(descending ? desc(column) : column));\n  },\n  select: props => {\n    const {\n      columns,\n      data\n    } = props;\n    if (!(columns != null && columns.length)) return data;else return tidy(data, select(columns.map(column => `${column}`)));\n  },\n  drop: props => {\n    const {\n      columns,\n      data\n    } = props;\n    if (!(columns != null && columns.length)) return data;else return tidy(data, select(columns.map(column => `-${column}`)));\n  },\n  distinct: props => {\n    const {\n      columns,\n      data\n    } = props;\n    const res = tidy(data, distinct(columns != null && columns.length ? columns : null));\n    return res;\n  },\n  filter_string: props => {\n    const {\n      column,\n      logic,\n      rhs,\n      data\n    } = props;\n    if (!column || rhs === undefined) return data;\n\n    switch (logic) {\n      case \"gt\":\n        return tidy(data, filter(d => d[column] > rhs));\n\n      case \"lt\":\n        return tidy(data, filter(d => d[column] < rhs));\n\n      case \"ge\":\n        return tidy(data, filter(d => d[column] >= rhs));\n\n      case \"le\":\n        return tidy(data, filter(d => d[column] <= rhs));\n\n      case \"eq\":\n        return tidy(data, filter(d => d[column] == rhs));\n\n      case \"ne\":\n        return tidy(data, filter(d => d[column] != rhs));\n\n      default:\n        return data;\n    }\n  },\n  filter_columns: props => {\n    const {\n      columns,\n      logic,\n      data\n    } = props;\n    const [left, right] = columns;\n    if (!left || !right) return data;\n\n    switch (logic) {\n      case \"gt\":\n        return tidy(data, filter(d => d[columns[0]] > d[columns[1]]));\n\n      case \"lt\":\n        return tidy(data, filter(d => d[columns[0]] < d[columns[1]]));\n\n      case \"ge\":\n        return tidy(data, filter(d => d[columns[0]] >= d[columns[1]]));\n\n      case \"le\":\n        return tidy(data, filter(d => d[columns[0]] <= d[columns[1]]));\n\n      case \"eq\":\n        return tidy(data, filter(d => d[columns[0]] === d[columns[1]]));\n\n      case \"ne\":\n        return tidy(data, filter(d => d[columns[0]] !== d[columns[1]]));\n\n      default:\n        return data;\n    }\n  },\n  mutate_columns: props => {\n    const {\n      newcolumn,\n      lhs,\n      rhs,\n      logic,\n      data\n    } = props;\n    if (!newcolumn || !lhs || !rhs || !logic) return data;\n    const calc = {};\n\n    switch (logic) {\n      case \"plus\":\n        calc[newcolumn] = d => d[lhs] + d[rhs];\n\n        return tidy(data, mutate(calc));\n\n      case \"minus\":\n        calc[newcolumn] = d => d[lhs] - d[rhs];\n\n        return tidy(data, mutate(calc));\n\n      case \"mult\":\n        calc[newcolumn] = d => d[lhs] * d[rhs];\n\n        return tidy(data, mutate(calc));\n\n      case \"div\":\n        calc[newcolumn] = d => d[lhs] / d[rhs];\n\n        return tidy(data, mutate(calc));\n\n      case \"gt\":\n        calc[newcolumn] = d => d[lhs] > d[rhs];\n\n        return tidy(data, mutate(calc));\n\n      case \"lt\":\n        calc[newcolumn] = d => d[lhs] < d[rhs];\n\n        return tidy(data, mutate(calc));\n\n      case \"ge\":\n        calc[newcolumn] = d => d[lhs] >= d[rhs];\n\n        return tidy(data, mutate(calc));\n\n      case \"le\":\n        calc[newcolumn] = d => d[lhs] <= d[rhs];\n\n        return tidy(data, mutate(calc));\n\n      case \"eq\":\n        calc[newcolumn] = d => d[lhs] == d[rhs];\n\n        return tidy(data, mutate(calc));\n\n      case \"ne\":\n        calc[newcolumn] = d => d[lhs] != d[rhs];\n\n        return tidy(data, mutate(calc));\n\n      default:\n        return data;\n    }\n  },\n  mutate_number: props => {\n    const {\n      newcolumn,\n      lhs,\n      rhs,\n      logic,\n      data\n    } = props;\n    if (newcolumn === undefined || !lhs || rhs === undefined || !logic) return data;\n    const calc = {};\n\n    switch (logic) {\n      case \"plus\":\n        calc[newcolumn] = d => d[lhs] + rhs;\n\n        return tidy(data, mutate(calc));\n\n      case \"minus\":\n        calc[newcolumn] = d => d[lhs] - rhs;\n\n        return tidy(data, mutate(calc));\n\n      case \"mult\":\n        calc[newcolumn] = d => d[lhs] * rhs;\n\n        return tidy(data, mutate(calc));\n\n      case \"div\":\n        calc[newcolumn] = d => d[lhs] / rhs;\n\n        return tidy(data, mutate(calc));\n\n      case \"gt\":\n        calc[newcolumn] = d => d[lhs] > rhs;\n\n        return tidy(data, mutate(calc));\n\n      case \"lt\":\n        calc[newcolumn] = d => d[lhs] < rhs;\n\n        return tidy(data, mutate(calc));\n\n      case \"ge\":\n        calc[newcolumn] = d => d[lhs] >= rhs;\n\n        return tidy(data, mutate(calc));\n\n      case \"le\":\n        calc[newcolumn] = d => d[lhs] <= rhs;\n\n        return tidy(data, mutate(calc));\n\n      case \"eq\":\n        calc[newcolumn] = d => d[lhs] == rhs;\n\n        return tidy(data, mutate(calc));\n\n      case \"ne\":\n        calc[newcolumn] = d => d[lhs] != rhs;\n\n        return tidy(data, mutate(calc));\n\n      default:\n        return data;\n    }\n  },\n  summarize: props => {\n    const {\n      columns,\n      calc,\n      data\n    } = props;\n    if (!(columns != null && columns.length) || !calc) return data;\n    const summarizer = summarizers[calc];\n    if (!summarizer) return data; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    const items = {};\n    columns.forEach(column => items[column] = summarizer(column));\n    return tidy(data, summarize(items));\n  },\n  summarize_by_group: props => {\n    const {\n      column,\n      by,\n      calc,\n      data\n    } = props;\n    if (!column || !by || !calc) return data;\n    const summarizer = summarizers[calc];\n    if (!summarizer) return data;\n    const items = {};\n    items[column] = summarizer(column);\n    const res = tidy(data, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    groupBy(by, [summarize(items)]));\n    console.debug(`summarize by group`, {\n      res\n    });\n    return res;\n  },\n  count: props => {\n    const {\n      column,\n      data\n    } = props;\n    if (!column) return data; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    return tidy(data, count$1(column, {\n      name: \"count\"\n    }));\n  },\n  record_window: props => {\n    var _previousData;\n\n    const {\n      data,\n      previousData,\n      horizon\n    } = props;\n    if (!(data != null && data.length)) return data;\n    const now = data[data.length - 1].time;\n    const previousNow = previousData == null ? void 0 : (_previousData = previousData[(previousData == null ? void 0 : previousData.length) - 1]) == null ? void 0 : _previousData.time;\n    if (now === undefined || previousNow === undefined) return data.filter(r => now - r.time < horizon);\n    return [...previousData.filter(r => now - r.time < horizon), ...data.filter(r => now - r.time < horizon && r.time > previousNow)];\n  },\n  bin: props => {\n    const {\n      data,\n      column\n    } = props;\n    const binner = bin().value(d => d[column]);\n    const binned = binner(data); // convert back to objects\n\n    return binned.map(b => ({\n      count: b.length,\n      x0: b.x0,\n      x1: b.x1\n    }));\n  },\n  correlation: props => {\n    const {\n      data,\n      columns\n    } = props;\n    columns.sort();\n    const res = columns.map((row, r) => ({\n      row,\n      r,\n      drow: data.map(obj => obj[row])\n    })).map(({\n      row,\n      r,\n      drow\n    }) => columns.map((column, c) => r <= c ? {\n      row,\n      column,\n      correlation: sampleCorrelation(drow, data.map(obj => obj[column]))\n    } : undefined)).flat().filter(o => !!o);\n    return res;\n  },\n  linear_regression: props => {\n    const {\n      data,\n      column1,\n      column2\n    } = props;\n    if (!column1 || !column2) return data;\n    const x = data.map(obj => obj[column1]);\n    const y = data.map(obj => obj[column2]);\n    const linregmb = linearRegression([x, y]);\n    return [{\n      slope: linregmb.m.toFixed(3),\n      intercept: linregmb.b.toFixed(3)\n    }];\n  },\n  replace_nully: props => {\n    const {\n      data,\n      replacements\n    } = props;\n    const res = tidy(data, replaceNully(replacements));\n    return res;\n  },\n  fill_nully: props => {\n    const {\n      data,\n      replacements\n    } = props;\n    let res = data.slice(0);\n    const downs = Object.keys(replacements).filter(column => replacements[column] === \"down\");\n    const ups = Object.keys(replacements).filter(column => replacements[column] === \"up\");\n    if (downs.length) res = tidy(data, fill(downs));\n    if (ups.length) res = tidy(res.reverse(), fill(downs)).reverse();\n    return res;\n  },\n  rename: props => {\n    const {\n      data,\n      names\n    } = props;\n    const res = tidy(data, rename(names));\n    return res;\n  },\n  slice: props => {\n    const {\n      data\n    } = props;\n    let index = 0;\n    const tidied = data ? tidy(data, props.sliceHead ? sliceHead(props.sliceHead) : undefined, props.sliceTail ? sliceTail(props.sliceTail) : undefined, props.sliceSample ? sliceSample(props.sliceSample) : undefined, props.sliceMin ? sliceMin(props.sliceMin, props.sliceColumn) : undefined, props.sliceMax ? sliceMax(props.sliceMax, props.sliceColumn) : undefined, mutate({\n      index: () => index++\n    })) : [];\n    return tidied;\n  },\n  rolling_summary: props => {\n    const {\n      data,\n      horizon,\n      column,\n      newcolumn,\n      calc\n    } = props;\n    const summarizer = summarizers[calc];\n    if (!calc) return null;\n    const res = tidy(data, mutateWithSummary({\n      [newcolumn]: roll(horizon, summarizer(column), {\n        partial: true\n      })\n    })); // deviation/variance always generate undefined\n\n    if (calc === \"deviation\" || calc === \"variance\") res.shift();\n    return res;\n  }\n};\n\nfunction transformData(message) {\n  try {\n    const handler = handlers[message.type];\n    return handler == null ? void 0 : handler(message);\n  } catch (e) {\n    console.debug(e);\n    return undefined;\n  }\n}\n\nasync function handleMessage(event) {\n  const message = event.data; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  const {\n    id,\n    worker\n  } = message,\n        rest = _objectWithoutPropertiesLoose(message, _excluded);\n\n  if (worker !== \"data\") return;\n\n  try {\n    const newData = await transformData(message);\n\n    const resp = _extends({\n      id,\n      worker\n    }, rest, {\n      data: newData\n    });\n\n    self.postMessage(resp);\n  } catch (e) {\n    self.postMessage({\n      id,\n      worker,\n      error: e + \"\"\n    });\n  }\n}\n\nself.addEventListener(\"message\", handleMessage);\nconsole.debug(`data: worker registered`);\n//# sourceMappingURL=data-worker.js.map\n"],"names":[],"sourceRoot":""}