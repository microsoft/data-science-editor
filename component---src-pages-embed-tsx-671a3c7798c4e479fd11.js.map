{"version":3,"file":"component---src-pages-embed-tsx-671a3c7798c4e479fd11.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAqCO,6BAA6D,CAChE,GAAMA,CAAAA,MAAM,CAAGC,KAAK,CAApB,OACA,IAAK,GAAIC,CAAAA,CAAC,CAAV,EAAgBA,CAAC,CAAGF,MAAM,CAA1B,OAAmC,EAAnC,EAAwC,CACpC,GAAMG,CAAAA,KAAK,CAAGH,MAAM,CAANA,CAAM,CAANA,CAAAA,MAAAA,CAAd,IAAcA,CAAd,CACA,SAAW,aAEf,kBAGJ,CAAO,kCAAuD,CAC1D,GAAMG,CAAAA,KAAK,CAAGC,QAAQ,OAAtB,IAAsB,CAAtB,CACA,MAAOD,CAAAA,KAAP,OAAOA,EAAAA,KAAP,SAAOA,CAAP,MAAOA,CAAAA,KAAK,CAAZ,MAGJ,CAAO,qDAQiC,CACpC,GAAME,CAAAA,IAAI,CAAGC,aAAa,GAA1B,SAA0B,CAA1B,CACA,GAAM,gBAAqBC,OAAO,EAAlC,GACA,GAAMC,CAAAA,MAAM,CAAGC,aAAa,WAA5B,IAA4B,CAA5B,CACA,YACA,GAAI,CAAJ,OAAa,CACT,GAAIC,QAAQ,EAAI,CAAhB,KAAuBC,OAAO,CAA9B,gBAAuBA,CAAvB,IACK,SAAUA,OAAO,CAAMN,IAAN,CAAPM,mBAAAA,CAEnB,OAAO,QAAP,OAAO,CAAP,CAGJ,CAAO,sCAIL,CACE,GAAI,OAAS,CAAb,KAAoB,iBAEpB,GAAM,UAAcC,4BAAW,MAA/B,IAA+B,CAA/B,CACA,MAAOC,CAAAA,OAAO,CAAPA,OAAAA,CAAAA,IAAAA,EAAwB,CAAxBA,CAAAA,CAAAA,IAAAA,CAAP,UACH;;;;;;;;;;;;;;;;;AChFD;AACA;AAKA;AACA;AASA;AACA;AAMA;AACA;AAEe,gBAAgB;AAC3B,MAAMC,KAAK,GAAGC,gBAAd;AACA,MAAMC,QAAQ,GAAGD,gBAAM,CAAvB,SAAuB,CAAvB;AACA,MAAME,MAAM,GAAZ;AACA,MAAMC,MAAyB,GAAG,CAC9B;AACIC,IAAAA,IAAI,EADR;AAEIC,IAAAA,IAAI,EAFR;AAGIC,IAAAA,QAAQ,EAHZ;AAAA;AAKIC,IAAAA,KAAK,EALT;AAMIC,IAAAA,aAAa,EANjB;AAOIC,IAAAA,gBAAgB,EAAE;AAPtB,GAD8B,EAU9B;AACIL,IAAAA,IAAI,EADR;AAEIC,IAAAA,IAAI,EAFR;AAGIC,IAAAA,QAAQ,EAHZ;AAAA;AAKIC,IAAAA,KAAK,EAAE,CACH;AACIF,MAAAA,IAAI,EAAEK,8CADV;AAEIpB,MAAAA,IAAI,EAAE;AAFV,KADG,EAKH;AACIe,MAAAA,IAAI,EADR;AAEIf,MAAAA,IAAI,EAFR;AAGIE,MAAAA,OAAO,EAAE,CACL,cADK,WACL,CADK,EAEL,eAFK,YAEL,CAFK;AAHb,KALG,CALX;AAmBImB,IAAAA,iBAAiB,EAnBrB;AAoBIH,IAAAA,aAAa,EApBjB;AAqBIC,IAAAA,gBAAgB,EAAE;AArBtB,GAV8B,CAAlC;AAkCA,MAAMG,QAA6B,GAAG,CAClC;AACIR,IAAAA,IAAI,EADR;AAEId,IAAAA,IAAI,EAFR;AAAA;AAIIuB,IAAAA,QAAQ,EAAE,MAAM,CAAN,IACN3B,KAAK,KAAK;AAAEkB,MAAAA,IAAI,EAAN;AAAiBC,MAAAA,IAAI,EAAEnB,KAAK,CAACmB;AAA7B,KAAL,CADC;AAJd,GADkC,CAAtC;AAUA,MAAMS,UAML,GAAG;AACAC,IAAAA,aAAa;AAAA,+DAAE,aAAY;AACvBC,QAAAA,OAAO,CAAPA,KAAAA,CAAAA,iBAAAA;AACA,YAAMC,OAAO,GAAG,KAAK,CAAL,EAAK,CAAL,aAEP,WAAW;AAAEC,UAAAA,CAAC,EAAH;AAAQC,UAAAA,CAAC,EAAEC,IAAI,CAAJA,MAAAA;AAAX,SAAX,CAFO,CAAhB;AAGA,eAAO;AAAEH,UAAAA;AAAF,SAAP;AALS;;AAAA;AAAA;AAAA;;AAAA;AADb,KACa,EADb;AAQAI,IAAAA,WAAW;AAAA,6DAAE,uBAAsB;AAC/BL,QAAAA,OAAO,CAAPA,KAAAA,CAAAA,eAAAA;AACA,YAAM;AAAA;AAAUpB,UAAAA;AAAV,YAAsB0B,kBAAkB,aAA9C,QAA8C,CAA9C;AACA,YAAMC,KAAK,GAAGhC,aAAa,IAA3B,OAA2B,CAA3B;AACA,YAAMiC,UAAU,GAAGD,KAAK,KAAxB;AAEAP,QAAAA,OAAO,CAAPA,KAAAA,CAAAA,eAAAA,EAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAM3BpB,UAAAA;AAN2B,SAA/BoB;AASA,YAAI,CAAJ,QAAa,OAAO,OAAO,CAAP,QAAgB;AAAA;AAAWpB,UAAAA;AAAX,SAAhB,CAAP;AACb,YAAM6B,GAAG,GAAGC,mBAAI,UAEZC,sBAAO,CAACH,UAAU,GAAGI,mBAAI,CAAP,MAAO,CAAP,GAFtB,MAEW,CAFK,CAAhB;AAIA,eAAO;AAAEX,UAAAA,OAAO,EAAT;AAAgBrB,UAAAA;AAAhB,SAAP;AApBO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AARX,GANJ,CAhD2B,CAqF3B;;AACA,MAAMiC,IAAI,GAAIC,OAAD,IAAqB;AAC9B/B,IAAAA,KAAK,CAALA,OAAAA,CAAAA,aAAAA,CAAAA,WAAAA,CAAAA,OAAAA,EAAAA,GAAAA;AADJ;;AAIA,MAAMgC,YAAY;AAAA,mDAAG,iBAA4B;AAC7C,UAAMC,GAAG;AAAA;AAAsBpB,QAAAA;AAAtB,QAAT;AACAiB,MAAAA,IAAI,CAAJA,GAAI,CAAJA;AAFc;;AAAA,oBAAZE,YAAY;AAAA;AAAA;AAAlB,GAAkB,EAAlB;;AAKA,MAAME,eAAe;AAAA,oDAAG,iBAAqC;AACzDjB,MAAAA,OAAO,CAAPA,GAAAA,CAAAA,oBAAAA;;AACA,UAAM;AAAA;AAAA;AAAsBC,QAAAA;AAAtB,UAAN;AAAA,UAAwCiB,IAAxC;;AACA,UAAMhD,KAAK,GAAGiD,SAAS,CAATA,MAAAA,CAAAA,IAAAA,CAAsBC,CAAC,IAAIA,CAAC,CAADA,EAAAA,KAAzC,OAAcD,CAAd;AACA,UAAME,WAAW,GAAGvB,UAAU,CAAC5B,KAAK,CAApC,IAA8B,CAA9B;AACA,UAAMuC,GAAG,SAASY,WAAT,SAASA,IAAAA,WAAT,WAASA,GAAT,MAASA,GAAAA,WAAW,QAA7B,OAA6B,CAA7B;AACAR,MAAAA,IAAI,yBAAgBJ,GAAG,IAAvBI,EAAI,EAAJA;AANiB;;AAAA,oBAAfI,eAAe;AAAA;AAAA;AAArB,GAAqB,EAArB;;AASAK,EAAAA,iCAAc,YAETN,GAAD,IAAmC;AAC/B,QAAM;AAAEO,MAAAA;AAAF,QAAN;AACA,QAAIA,IAAI,CAAJA,IAAAA,KAAJ,OAAyB;AACzB,QAAM;AAAA;AAAUC,MAAAA;AAAV,QAAN;;AACA;AACI;AACIvC,QAAAA,QAAQ,CAARA,OAAAA,GAAAA,KAAAA;AACA;;AACJ;AACIA,QAAAA,QAAQ,CAARA,OAAAA,GAAAA,KAAAA;AACA;;AACJ;AAAe;AACX8B,UAAAA,YAAY,CAAZA,IAAY,CAAZA;AACA;AACH;;AACD;AAAkB;AACdE,UAAAA,eAAe,CAAfA,IAAe,CAAfA;AACA;AACH;AAdL;AANM,YAAdK,EAAc,CAAdA;;AA2BA,MAAMG,aAAa,GAAG,MAAM;AACxBZ,IAAAA,IAAI,CAAC;AAAExB,MAAAA,IAAI,EAAN;AAAeqC,MAAAA,MAAM,EAArB;AAAiCF,MAAAA,KAAK,EAAEvC,QAAQ,CAAC0C;AAAjD,KAAD,CAAJd;AADJ;;AAIA,sBACI,uDACI,gCADJ,qCACI,CADJ,eAEI,+BAFJ,iHAEI,CAFJ,eAMI,4CACI;AACI,SAAK,EADT;AAEI,WAAO,EAAEY;AAFb,KAPR,SAOQ,CADJ,CANJ,eAcI;AACI,OAAG,EADP;AAEI,SAAK,EAFT;AAGI,OAAG,EAAEG,mCAAU,CAHnB,WAGmB,CAHnB;AAII,SAAK,EAAE;AACHC,MAAAA,MAAM,EADH;AAEHC,MAAAA,IAAI,EAFD;AAGHC,MAAAA,GAAG,EAHA;AAIHC,MAAAA,KAAK,EAJF;AAKHC,MAAAA,MAAM,EAAE;AALL;AAJX,IAdJ,CADJ;AA6BH","sources":["webpack://data-science-editor/./src/components/blockly/dsl/workspacejson.ts","webpack://data-science-editor/./src/pages/embed.tsx"],"sourcesContent":["import { DataType } from \"../../dom/constants\"\nimport { tidyHeaders } from \"../fields/tidy\"\nimport { BlockDataSet } from \"../toolbox\"\n\nexport interface VariableJSON {\n    // Boolean, Number, String, or service short id\n    type: string\n    id: string\n    name: string\n}\n\nexport type FieldJSON = {\n    id?: string\n    value?: number | string | boolean | any\n    // Boolean, Number, String, or service short id\n    variabletype?: string\n    // and extra fields, subclass\n}\n\nexport interface InputJSON {\n    type: number\n    name: string\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    fields: Record<string, FieldJSON>\n    child?: BlockJSON\n}\n\nexport interface BlockJSON {\n    type: string\n    id: string\n    children?: BlockJSON[]\n    value?: string | number | boolean\n    inputs?: InputJSON[]\n    next?: BlockJSON\n    warning?: string\n}\n\nexport function getField(block: BlockJSON, name: string): FieldJSON {\n    const inputs = block.inputs\n    for (let i = 0; i < inputs.length; ++i) {\n        const field = inputs[i].fields[name]\n        if (field) return field\n    }\n    return undefined\n}\n\nexport function getFieldValue(block: BlockJSON, name: string) {\n    const field = getField(block, name)\n    return field?.value\n}\n\nexport function resolveFieldColumn(\n    data: BlockDataSet,\n    b: BlockJSON,\n    fieldName: string,\n    options?: {\n        type?: DataType\n        required?: boolean\n    }\n): { column: string; warning?: string } {\n    const name = getFieldValue(b, fieldName) as string\n    const { type, required } = options || {}\n    const column = resolveHeader(data, name, type)\n    let warning: string\n    if (!column) {\n        if (required && !name) warning = \"missing column\"\n        else if (name) warning = `${name} column not found`\n    }\n    return { column, warning }\n}\n\nexport function resolveHeader(\n    data: BlockDataSet,\n    name: string,\n    type?: DataType\n) {\n    if (!data || !name) return undefined\n\n    const { headers } = tidyHeaders(data, type)\n    return headers.indexOf(name) > -1 ? name : undefined\n}\n\nexport interface WorkspaceJSON {\n    variables: VariableJSON[]\n    blocks: BlockJSON[]\n}\n\nexport interface WorkspaceFile {\n    editor: string\n    xml: string\n    json?: WorkspaceJSON\n}\n","import React, { useRef } from \"react\"\nimport {\n    BlockJSON,\n    getFieldValue,\n    resolveFieldColumn,\n} from \"../components/blockly/dsl/workspacejson\"\nimport DataColumnChooserField from \"../components/blockly/fields/DataColumnChooserField\"\nimport {\n    BlockDataSet,\n    BlockDefinition,\n    BlockReference,\n    CategoryDefinition,\n    ContentDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    OptionsInputDefinition,\n} from \"../components/blockly/toolbox\"\nimport useWindowEvent from \"../components/hooks/useWindowEvent\"\nimport { tidy, arrange, desc } from \"@tidyjs/tidy\"\nimport {\n    DslBlocksResponse,\n    DslMessage,\n    DslTransformMessage,\n} from \"../components/blockly/dsl/iframedsl\"\nimport { Button } from \"gatsby-material-ui-components\"\nimport { withPrefix } from \"gatsby\"\n\nexport default function Page() {\n    const frame = useRef<HTMLIFrameElement>()\n    const dslidRef = useRef<string>(undefined)\n    const colour = \"#f01010\"\n    const blocks: BlockDefinition[] = [\n        {\n            kind: \"block\",\n            type: \"iframe_random\",\n            message0: \"iframe random\",\n            colour,\n            args0: [],\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n        },\n        {\n            kind: \"block\",\n            type: \"iframe_sort\",\n            message0: \"iframe arrange %1 %2\",\n            colour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                },\n                {\n                    type: \"field_dropdown\",\n                    name: \"order\",\n                    options: [\n                        [\"ascending\", \"ascending\"],\n                        [\"descending\", \"descending\"],\n                    ],\n                } as OptionsInputDefinition,\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n        },\n    ]\n    const category: ContentDefinition[] = [\n        {\n            kind: \"category\",\n            name: \"Custom\",\n            colour,\n            contents: blocks.map(\n                block => ({ kind: \"block\", type: block.type } as BlockReference)\n            ),\n        } as CategoryDefinition,\n    ]\n    const transforms: Record<\n        string,\n        (\n            b: BlockJSON,\n            dataset: BlockDataSet\n        ) => Promise<{ dataset: BlockDataSet; warning?: string }>\n    > = {\n        iframe_random: async () => {\n            console.debug(`hostdsl: random`)\n            const dataset = Array(10)\n                .fill(0)\n                .map((_, i) => ({ x: i, y: Math.random() }))\n            return { dataset }\n        },\n        iframe_sort: async (b, dataset) => {\n            console.debug(`hostdsl: sort`)\n            const { column, warning } = resolveFieldColumn(dataset, b, \"column\")\n            const order = getFieldValue(b, \"order\")\n            const descending = order === \"descending\"\n\n            console.debug(`hostdsl: sort`, {\n                b,\n                dataset,\n                column,\n                order,\n                descending,\n                warning,\n            })\n\n            if (!column) return Promise.resolve({ dataset, warning })\n            const res = tidy(\n                dataset,\n                arrange(descending ? desc(column) : column)\n            )\n            return { dataset: res, warning }\n        },\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    const post = (payload: object) => {\n        frame.current.contentWindow.postMessage(payload, \"*\")\n    }\n\n    const handleBlocks = async (data: DslMessage) => {\n        const msg = { ...data, blocks, category } as DslBlocksResponse\n        post(msg)\n    }\n\n    const handleTransform = async (data: DslTransformMessage) => {\n        console.log(`hostdsl: transform`)\n        const { blockId, workspace, dataset, ...rest } = data\n        const block = workspace.blocks.find(b => b.id === blockId)\n        const transformer = transforms[block.type]\n        const res = await transformer?.(block, dataset)\n        post({ ...rest, ...(res || {}) })\n    }\n\n    useWindowEvent(\n        \"message\",\n        (msg: MessageEvent<DslMessage>) => {\n            const { data } = msg\n            if (data.type !== \"dsl\") return\n            const { action, dslid } = data\n            switch (action) {\n                case \"mount\":\n                    dslidRef.current = dslid\n                    break\n                case \"unmount\":\n                    dslidRef.current = dslid\n                    break\n                case \"blocks\": {\n                    handleBlocks(data)\n                    break\n                }\n                case \"transform\": {\n                    handleTransform(data as DslTransformMessage)\n                    break\n                }\n            }\n        },\n        false,\n        []\n    )\n\n    const handleRefresh = () => {\n        post({ type: \"dsl\", action: \"change\", dslid: dslidRef.current })\n    }\n\n    return (\n        <>\n            <h1>Data Science Editor + hosted blocks</h1>\n            <p>\n                The data editor below is an example of hosted editor with\n                additional blocks injected by host (Custom category).\n            </p>\n            <p>\n                <Button\n                    title=\"Click this button to trigger a refresh\"\n                    onClick={handleRefresh}\n                >\n                    Refresh\n                </Button>\n            </p>\n            <iframe\n                ref={frame}\n                title=\"data editor\"\n                src={withPrefix(\"/?embed=1\")}\n                style={{\n                    border: \"none\",\n                    left: 0,\n                    top: 0,\n                    width: \"100vh\",\n                    height: \"80vh\",\n                }}\n            ></iframe>\n        </>\n    )\n}\n"],"names":["inputs","block","i","field","getField","name","getFieldValue","options","column","resolveHeader","required","warning","tidyHeaders","headers","frame","useRef","dslidRef","colour","blocks","kind","type","message0","args0","nextStatement","dataPreviewField","DataColumnChooserField","previousStatement","category","contents","transforms","iframe_random","console","dataset","x","y","Math","iframe_sort","resolveFieldColumn","order","descending","res","tidy","arrange","desc","post","payload","handleBlocks","msg","handleTransform","rest","workspace","b","transformer","useWindowEvent","data","dslid","handleRefresh","action","current","withPrefix","border","left","top","width","height"],"sourceRoot":""}